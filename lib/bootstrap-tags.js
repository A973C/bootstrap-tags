// Generated by CoffeeScript 1.4.0
(function() {
  var Tag, Tagger, TaggerCollection;

  Tag = (function() {

    Tag.prototype.template = function() {
      return "<div class='tag'>" + this.tag + "</div>";
    };

    function Tag(options) {
      var key, value;
      if (options == null) {
        options = {};
      }
      for (key in options) {
        value = options[key];
        this[key] = value;
      }
    }

    return Tag;

  })();

  Tagger = (function() {

    Tagger.prototype.defaultOptions = {
      readOnly: false,
      suggestions: [],
      restrictTo: [],
      exclude: [],
      displayPopovers: false,
      popoverTrigger: 'hover',
      tagClass: 'btn-info',
      promptText: 'Enter tags...',
      readOnlyEmptyMessage: 'No tags to display...',
      beforeAddingTag: function() {},
      afterAddingTag: function() {},
      beforeDeletingTag: function() {},
      afterDeletingTag: function() {},
      excludesTags: function() {
        return false;
      },
      onTagRemoved: function() {}
    };

    function Tagger(element, options) {
      var k, v, _ref;
      if (options == null) {
        options = {};
      }
      this.$el = $(element);
      this.options = {};
      _ref = this.defaultOptions;
      for (k in _ref) {
        v = _ref[k];
        this.options[k] = v;
      }
      $.extend(this.options, options);
    }

    Tagger.prototype.updateOptions = function(options) {
      if (options == null) {
        options = {};
      }
      return $.extend(this.options, options);
    };

    Tagger.prototype.hello = function() {
      return console.log(this.options.text || "world");
    };

    return Tagger;

  })();

  window.Tagger = Tagger;

  TaggerCollection = (function() {
    var key, value, _fn, _ref,
      _this = this;

    function TaggerCollection(items) {
      this.items = items;
    }

    _ref = Tagger.prototype;
    _fn = function(key, value) {
      return TaggerCollection.prototype[key] = function(args) {
        var element, _i, _len, _ref1, _results;
        _ref1 = this.items;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          element = _ref1[_i];
          _results.push(value.apply($(element).data('tags'), args));
        }
        return _results;
      };
    };
    for (key in _ref) {
      value = _ref[key];
      _fn(key, value);
    }

    return TaggerCollection;

  }).call(this);

  (function($, window, document) {
    return $.fn.tags = function(options) {
      this.each(function(i, el) {
        var $el;
        $el = $(el);
        if ($el.data('tags') == null) {
          return $el.data('tags', new Tagger(el, options));
        } else {
          return $el.data('tags').updateOptions(options);
        }
      });
      return new TaggerCollection(this);
    };
  })($, window, document);

}).call(this);
